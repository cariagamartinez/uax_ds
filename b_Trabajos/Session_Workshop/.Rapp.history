# Cargamos las librerías necesarias#
library(tidyverse)  # Para manipulación de datos y visualización#
library(caret)      # Para evaluación del modelo
# 1. Lectura del dataset#
datos <- read.csv("Session_Workshop/dataset_session_biomedicina.csv")
getwd()
datos <- read.csv("dataset_session_biomedicina.csv")
View(datos)
# Exploración inicial del dataset#
str(datos)  # Estructura del dataset
summary(datos)  # Resumen estadístico de las variables
# 2. Análisis Exploratorio de Datos (EDA)#
# Distribución de la variable objetivo (Riesgo_Cardiovascular)#
hist(datos$Riesgo_Cardiovascular, #
     main = "Distribución del Riesgo Cardiovascular",#
     xlab = "Riesgo Cardiovascular", #
     ylab = "Frecuencia", #
     col = "skyblue", #
     border = "black")
# Relación entre Edad e IMC con el Riesgo Cardiovascular#
plot(datos$Edad, datos$Riesgo_Cardiovascular, main = "Edad vs Riesgo Cardiovascular",#
     xlab = "Edad", ylab = "Riesgo Cardiovascular", pch = 12, col = "blue")
# Relación entre Edad e IMC con el Riesgo Cardiovascular#
plot(datos$Edad, datos$Riesgo_Cardiovascular, main = "Edad vs Riesgo Cardiovascular",#
     xlab = "Edad", ylab = "Riesgo Cardiovascular", pch = 19, col = "blue")
ls()
ls()
plot(datos$IMC, datos$Riesgo_Cardiovascular, main = "IMC vs Riesgo Cardiovascular",#
     xlab = "IMC", ylab = "Riesgo Cardiovascular", pch = 19, col = "red")
# Conversión de variables categóricas a factores para el modelo#
datos$Actividad_Fisica <- as.factor(datos$Actividad_Fisica)#
datos$Fumador <- as.factor(datos$Fumador)
# Separación de los datos en conjuntos de entrenamiento y prueba#
set.seed(123)#
index <- createDataPartition(datos$Riesgo_Cardiovascular, p = 0.7, list = FALSE)#
train_data <- datos[index, ]#
test_data <- datos[-index, ]#
#
# 3. Generación de un modelo de regresión lineal#
# Definimos el modelo lineal para predecir el Riesgo Cardiovascular#
modelo <- lm(Riesgo_Cardiovascular ~ Edad + IMC + Nivel_Glucosa + Nivel_Colesterol +#
               Actividad_Fisica + Fumador, data = train_data)#
#
# Resumen del modelo#
summary(modelo)
# Utilizamos plot(modelo) para generar los gráficos de diagnóstico del modelo#
par(mfrow = c(2, 2))  # Configura el espacio de gráficos para mostrar 4 gráficos: 2 filas x 2 columnas#
plot(modelo)#
par(mfrow = c(1, 1))  # Restablece la configuración de gráficos
